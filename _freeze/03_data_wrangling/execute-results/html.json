{
  "hash": "da9bb3b72202627642b19f41450e1612",
  "result": {
    "markdown": "---\ntitle: \"Data Wrangling\"\nauthor: \"Foad Sanjaran\"\n---\n\n\n\n*Data Wrangling:*\n\n# Code:\n\n\n\n::: {.cell hash='03_data_wrangling_cache/html/unnamed-chunk-1_aa554f24eb2604697c36cc2a8abd8202'}\n\n```{.r .cell-code}\nlibrary(vroom)\nlibrary(data.table)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::between()         masks data.table::between()\n✖ readr::col_character()   masks vroom::col_character()\n✖ readr::col_date()        masks vroom::col_date()\n✖ readr::col_datetime()    masks vroom::col_datetime()\n✖ readr::col_double()      masks vroom::col_double()\n✖ readr::col_factor()      masks vroom::col_factor()\n✖ readr::col_guess()       masks vroom::col_guess()\n✖ readr::col_integer()     masks vroom::col_integer()\n✖ readr::col_logical()     masks vroom::col_logical()\n✖ readr::col_number()      masks vroom::col_number()\n✖ readr::col_skip()        masks vroom::col_skip()\n✖ readr::col_time()        masks vroom::col_time()\n✖ readr::cols()            masks vroom::cols()\n✖ readr::date_names_lang() masks vroom::date_names_lang()\n✖ readr::default_locale()  masks vroom::default_locale()\n✖ dplyr::filter()          masks stats::filter()\n✖ dplyr::first()           masks data.table::first()\n✖ readr::fwf_cols()        masks vroom::fwf_cols()\n✖ readr::fwf_empty()       masks vroom::fwf_empty()\n✖ readr::fwf_positions()   masks vroom::fwf_positions()\n✖ readr::fwf_widths()      masks vroom::fwf_widths()\n✖ lubridate::hour()        masks data.table::hour()\n✖ lubridate::isoweek()     masks data.table::isoweek()\n✖ dplyr::lag()             masks stats::lag()\n✖ dplyr::last()            masks data.table::last()\n✖ readr::locale()          masks vroom::locale()\n✖ lubridate::mday()        masks data.table::mday()\n✖ lubridate::minute()      masks data.table::minute()\n✖ lubridate::month()       masks data.table::month()\n✖ readr::output_column()   masks vroom::output_column()\n✖ readr::problems()        masks vroom::problems()\n✖ lubridate::quarter()     masks data.table::quarter()\n✖ lubridate::second()      masks data.table::second()\n✖ purrr::transpose()       masks data.table::transpose()\n✖ lubridate::wday()        masks data.table::wday()\n✖ lubridate::week()        masks data.table::week()\n✖ lubridate::yday()        masks data.table::yday()\n✖ lubridate::year()        masks data.table::year()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\ncol_types <- list(\n  id = col_character(),\n  type = col_character(),\n  number = col_character(),\n  country = col_character(),\n  date = col_date(\"%Y-%m-%d\"),\n  abstract = col_character(),\n  title = col_character(),\n  kind = col_character(),\n  num_claims = col_double(),\n  filename = col_character(),\n  withdrawn = col_double()\n)\n\npatent_tbl <- vroom(\n  file       = \"Patent_data_reduced/patent.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The following named parsers don't match the column names: type,\nnumber, country, abstract, title, kind, filename, withdrawn\n```\n:::\n\n```{.r .cell-code}\npatent_assignee_tbl <- vroom(\n  file       = \"Patent_data_reduced/patent_assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The following named parsers don't match the column names: id, type,\nnumber, country, date, abstract, title, kind, num_claims, filename, withdrawn\n```\n:::\n\n```{.r .cell-code}\nassignee_tbl <- vroom(\n  file       = \"Patent_data_reduced/assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The following named parsers don't match the column names: number,\ncountry, date, abstract, title, kind, num_claims, filename, withdrawn\n```\n:::\n\n```{.r .cell-code}\nuspc_tbl <- vroom(\n  file       = \"Patent_data_reduced/uspc.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The following named parsers don't match the column names: id, type,\nnumber, country, date, abstract, title, kind, num_claims, filename, withdrawn\n```\n:::\n\n```{.r .cell-code}\nsetDT(patent_tbl)\n\nsetDT(assignee_tbl)\n\nsetDT(patent_assignee_tbl)\n\nsetDT(uspc_tbl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n:::\n\n```{.r .cell-code}\nclass(assignee_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.table\" \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\ncolnames(assignee_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"id\"           \"type\"         \"organization\"\n```\n:::\n\n```{.r .cell-code}\nsetnames(assignee_tbl, \"id\", \"assignee_id\")\n\ncombined_data_1 <- merge(x = assignee_tbl, y = patent_assignee_tbl,by    = \"assignee_id\")\n\n\n\n\n\ncolnames(patent_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"id\"         \"date\"       \"num_claims\"\n```\n:::\n\n```{.r .cell-code}\nsetnames(patent_tbl, \"id\", \"patent_id\")\n\ncombined_data_2 <- merge(x = combined_data_1, y = patent_tbl, by = \"patent_id\")\n\n\n\n\n\nuspc_tbl[, patent_id := as.character(patent_id)]\ncombined_data_3 <- merge(x = uspc_tbl, y = combined_data_1, by = \"patent_id\")\n\n\n\n\n\n# First challenge\n\nsetDT(combined_data_1)\n\npatent_counts <- combined_data_1[, .(n_patents = .N), by = .(assignee_id, organization)][order(-n_patents)]\n\ntop_10_patent_holders <- patent_counts[1:10]\n\nview(top_10_patent_holders)\n\n\n# Second challenge\n\naugust_data <- combined_data_2[month(date) == 8 & year(date) == 2014]\n\npatent_counts <- august_data[, .(num_patents = .N), by = organization]\n\ntop_10 <- patent_counts[order(-num_patents)][1:10]\n\nas.data.table(top_10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                   organization num_patents\n 1: International Business Machines Corporation         718\n 2:               Samsung Electronics Co., Ltd.         524\n 3:                      Canon Kabushiki Kaisha         361\n 4:                       Microsoft Corporation         337\n 5:                            Sony Corporation         269\n 6:                                 Google Inc.         240\n 7:                       QUALCOMM Incorporated         223\n 8:                                  Apple Inc.         222\n 9:                    Kabushiki Kaisha Toshiba         213\n10:                         LG Electronics Inc.         211\n```\n:::\n\n```{.r .cell-code}\nview(top_10)\n\n# Third challenge\n\n\npatent_counts <- combined_data_3[, .(num_patents = .N), by = organization]\n\ntop_10_companies <- patent_counts[order(-num_patents)][1:10]\n\ntop_10_patents <- combined_data_3[organization %in% top_10_companies$organization]\n\ntech_counts <- top_10_patents[, .(num_patents = .N), by = mainclass_id]\n\ntop_5_tech_classes <- tech_counts[order(-num_patents)][1:5]\n\nview(top_5_tech_classes)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}